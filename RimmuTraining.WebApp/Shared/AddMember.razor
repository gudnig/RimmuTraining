@using RimmuTraining.WebApp.Domain.Members
@using RimmuTraining.WebApp.ViewModels

@inherits OwningComponentBase<MembersService>

<div class="@((isActive ? "modal is-active" : "modal"))">
    <div class="modal-background" @onclick="Toggle"></div>
    <div class="modal-content">
        <div class="box">
            <h3 class="title">New Member</h3>
            <EditForm Model="@newMember" OnValidSubmit="@CreateMember">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="field">
                    <label class="label">Name</label>
                    <div class="control">
                        <input class="input" type="text" @bind-value="@newMember.Name" placeholder="New Member Full Name" />
                    </div>
                    <p class="help">Please type in full name</p>
                    <button class="button" type="submit">Add Member</button>
                </div>
            </EditForm>

        </div>

    </div>
    <button class="modal-close is-large" @onclick="@Toggle" aria-label="close"></button>
</div>

<button class="button" @onclick="@Toggle">Add Member</button>

@code {

    [Parameter]
    public EventCallback<Member> OnAdd { get; set; }

    private NewMember newMember = new NewMember();
    bool isActive = false;


    private async Task CreateMember()
    {
        Guid id = Guid.NewGuid();
        var result = await Service.CreateMemberAsync(newMember.Name, id);
        if (result.Succeeded)
        {
            await OnAdd.InvokeAsync(new Member
            {
                Id = id,
                Name = newMember.Name,
                Activities = new List<string>()
            });
            Toggle();
        }

    }

    void Toggle()
    {
        isActive = !isActive;
    }
}


